:py:mod:`pytomography.algorithms`
=================================

.. py:module:: pytomography.algorithms

.. autoapi-nested-parse::

   This module contains all the available reconstruction algorithms in PyTomography



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   osem/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.algorithms.OSML
   pytomography.algorithms.OSEMOSL
   pytomography.algorithms.OSEMBSR




.. py:class:: OSML(image, system_matrix, object_initial = None, scatter = 0, prior = None)

   Abstract class for different algorithms. The difference between subclasses of this class is the method by which they include prior information. If no prior function is used, they are all equivalent.

   :param image: image data :math:`g` to be reconstructed
   :type image: torch.Tensor
   :param system_matrix: Instance of some system matrix class that models the imaging system. In particular, corresponds to :math:`H` in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space. If None, then initial guess consists of all 1s. Defaults to None.
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param scatter: estimate of scatter contribution :math:`s`.Defaults to 0.
   :type scatter: torch.Tensor
   :param prior: the Bayesian prior; computes :math:`\beta \frac{\partial V}{\partial f}`. If ``None``, then this term is 0. Defaults to None.
   :type prior: Prior, optional

   .. py:method:: get_subset_splits(n_subsets, n_angles)

      Returns a list of arrays; each array contains indices, corresponding to projection numbers, that are used in ordered-subsets. For example, ``get_subsets_splits(2, 6)`` would return ``[[0,2,4],[1,3,5]]``.

      :param n_subsets: number of subsets used in OSEM
      :type n_subsets: int
      :param n_angles: total number of projections
      :type n_angles: int

      :returns: list of index arrays for each subset
      :rtype: list


   .. py:method:: __call__(n_iters, n_subsets, callbacks = None)
      :abstractmethod:

      Abstract method for performing reconstruction: must be implemented by subclasses.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param callbacks: CallBacks to be evaluated after each subiteration. Defaults to None.
      :type callbacks: CallBack, optional



.. py:class:: OSEMOSL(image, system_matrix, object_initial = None, scatter = 0, prior = None)

   Bases: :py:obj:`OSML`

   Implements the ordered subset expectation algorithm using the one-step-late method to include prior information: :math:` \hat{f}^{n,m+1} = \left[\frac{1}{H_m^T 1  + \beta \frac{\partial V}{\partial \hat{f}}|_{\hat{f}=\hat{f}^{n,m}}} H_m^T \left(\frac{g_m}{H_m\hat{f}^{n,m}+s}\right)\right] \hat{f}^{n,m}`.

   :param image: image data :math:`g` to be reconstructed
   :type image: torch.Tensor
   :param system_matrix: System matrix :math:`H` used in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param scatter: estimate of scatter contribution :math:`s`.
   :type scatter: torch.Tensor
   :param prior: the Bayesian prior; computes :math:`\beta \frac{\partial V}{\partial f}`. If ``None``, then this term is 0. Defaults to None.
   :type prior: Prior, optional

   .. py:method:: _set_recon_name(n_iters, n_subsets)

      Set the unique identifier for the type of reconstruction performed. Useful for saving to DICOM files

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int


   .. py:method:: __call__(n_iters, n_subsets, callback = None)

      Performs the reconstruction using `n_iters` iterations and `n_subsets` subsets.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param callback: Callback function to be evaluated after each subiteration. Defaults to None.
      :type callback: CallBack, optional

      :returns: reconstructed object
      :rtype: torch.tensor[batch_size, Lx, Ly, Lz]



.. py:class:: OSEMBSR(image, system_matrix, object_initial = None, scatter = 0, prior = None)

   Bases: :py:obj:`OSML`

   Implements the ordered subset expectation algorithm using the block-sequential-regularized (BSREM) method to include prior information. In particular, each iteration consists of two steps: :math:`\tilde{\hat{f}}^{n,m+1} = \left[\frac{1}{H_m^T 1} H_m^T \left(\frac{g_m}{H_m\hat{f}^{n,m}+s}\right)\right] \hat{f}^{n,m}` followed by :math:`\hat{f}^{n,m+1} = \tilde{\hat{f}}^{n,m+1} \left(1-\beta\frac{\alpha_n}{H_m^T 1}\frac{\partial V}{\partial \tilde{\hat{f}}^{n,m+1}} \right)`.

   :param image: image data :math:`g` to be reconstructed
   :type image: torch.Tensor
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param system_matrix: System matrix :math:`H` used in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param scatter: estimate of scatter contribution :math:`s`.
   :type scatter: torch.Tensor
   :param prior: the Bayesian prior; computes :math:`\beta \frac{\partial V}{\partial f}`. If ``None``, then this term is 0. Defaults to None.
   :type prior: Prior, optional

   .. py:method:: _set_recon_name(n_iters, n_subsets)

      Set the unique identifier for the type of reconstruction performed. Useful for saving to DICOM files

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int


   .. py:method:: __call__(n_iters, n_subsets, relaxation_function = lambda x: 1, callback = None)

      Performs the reconstruction using `n_iters` iterations and `n_subsets` subsets.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param relaxation_function: Specifies relaxation sequence :math:`\alpha_n` where :math:`n` is the iteration number. Defaults to :math:`\alpha_n=1` for all :math:`n`.
      :type relaxation_function: function
      :param callback: Callback function to be called after each subiteration. Defaults to None.
      :type callback: CallBack, optional

      :returns: reconstructed object
      :rtype: torch.tensor[batch_size, Lx, Ly, Lz]



