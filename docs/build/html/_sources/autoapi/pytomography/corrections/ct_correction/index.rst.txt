:py:mod:`pytomography.corrections.ct_correction`
================================================

.. py:module:: pytomography.corrections.ct_correction


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.corrections.ct_correction.CTCorrectionNet



Functions
~~~~~~~~~

.. autoapisummary::

   pytomography.corrections.ct_correction.get_prob_of_detection_matrix



.. py:function:: get_prob_of_detection_matrix(CT, dx)

   Converts a CT scan in units of cm^-1 to a probability of photon detection matrix (scanner at +x)

   Args:
       CT (torch.tensor): Tensor of size [batch_size, Lx, Ly, Lz] of attenuation coefficients representing a CT scan
       dx (float): Pixel spacing in the transaxial plane

   Returns:
       torch.tensor: Tensor of size [batch_size, Lx, Ly, Lz] corresponding to probability of photon being detected at detector at +x axis


.. py:class:: CTCorrectionNet(object_meta, image_meta, CT, store_in_memory=False, device='cpu')

   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(object_i, i, norm_constant=None)

      Applies attenuation correction to an object that's being detected on the right of its first axis

      Args:
              object_i (torch.tensor): Tensor of size [batch_size, Lx, Ly, Lz] being projected along its first axis
              i (int): The projection index: used to find the corresponding angle in image space corresponding to object i
              norm_constant (torch.tensor, optional): A tensor used to normalize the output during back projection. Defaults to None.

      Returns:
              torch.tensor: Tensor of size [batch_size, Lx, Ly, Lz] such that projection of this tensor along the first axis corresponds to
              an attenuation corrected projection.



