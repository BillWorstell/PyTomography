:py:mod:`pytomography.corrections.psf_correction`
=================================================

.. py:module:: pytomography.corrections.psf_correction


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.corrections.psf_correction.PSFCorrectionNet



Functions
~~~~~~~~~

.. autoapisummary::

   pytomography.corrections.psf_correction.get_PSF_transform



.. py:function:: get_PSF_transform(sigma, kernel_size, delta=1e-09, device='cpu', kernel_dimensions='2D')

   Creates a 2D convolutional layer that is used for PSF correction

   Args:
       sigma (array): Array of length Lx corresponding to blurring (sigma of Gaussian) as a function of distance from scanner
       kernel_size (int): Size of the kernel used in each layer. Needs to be large enough to cover most of Gaussian
       delta (float, optional): Used to prevent division by 0 when sigma=0. Defaults to 1e-9.
       device (str, optional): Pytorch device used for computation. Defaults to 'cpu'.
       kernel_dimensions (str, optional): Whether or not blurring is done independently in each transaxial slice ('1D') or
                                           if blurring is done between transaxial slices ('2D'). Defaults to '2D'.

   Returns:
       torch.nn.Conv2d: Convolutional neural network layer used to apply blurring to objects of shape [batch_size, Lx, Ly, Lz]


.. py:class:: PSFCorrectionNet(object_meta, image_meta, psf_meta, device='cpu')

   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: get_sigma(radius, dx, shape, collimator_slope, collimator_intercept)

      Uses PSF Meta data information to get blurring (sigma) as a function of distance from detector

      Args:
          radius (float): The distance from the detector
          dx (float): Transaxial plane pixel spacing
          shape (tuple): Tuple containing (Lx, Ly, Lz): dimensions of object space 
          collimator_slope (float): See collimator intercept
          collimator_intercept (float): Collimator slope and collimator intercept are defined such that sigma(d) = collimator_slope*d + collimator_intercept
          where sigma corresponds to sigma of a Gaussian function that characterizes blurring as a function of distance from the detector.

      Returns:
          array: An array of length Lx corresponding to blurring at each point along the 1st axis in object space


   .. py:method:: forward(object_i, i, norm_constant=None)

      Applies PSF correction to an object that's being detected on the right of its first axis

      Args:
          object_i (torch.tensor): Tensor of size [batch_size, Lx, Ly, Lz] being projected along its first axis
                      i (int): The projection index: used to find the corresponding angle in image space corresponding to object i
                      norm_constant (torch.tensor, optional): A tensor used to normalize the output during back projection. Defaults to None.

      Returns:
          torch.tensor: Tensor of size [batch_size, Lx, Ly, Lz] such that projection of this tensor along the first axis corresponds to
                      an PSF corrected projection.



