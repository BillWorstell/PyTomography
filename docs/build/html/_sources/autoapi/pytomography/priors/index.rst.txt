:py:mod:`pytomography.priors`
=============================

.. py:module:: pytomography.priors

.. autoapi-nested-parse::

   The __init__ docstr



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   prior/index.rst
   relative_difference/index.rst
   smoothness/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.priors.QuadraticPrior
   pytomography.priors.LogCoshPrior
   pytomography.priors.RelativeDifferencePrior
   pytomography.priors.Prior




.. py:class:: QuadraticPrior(beta, delta = 1, device = 'cpu')

   Bases: :py:obj:`SmoothnessPrior`

   Implentation of `SmoothnessPrior` where :math:`\phi` is the identity function


.. py:class:: LogCoshPrior(beta, delta = 1, device = 'cpu')

   Bases: :py:obj:`SmoothnessPrior`

   Implementation of `SmoothnessPrior` where :math:`\phi` is the hyperbolic tangent function


.. py:class:: RelativeDifferencePrior(beta = 1, gamma = 1, device = 'cpu')

   Bases: :py:obj:`DiffAndSumSmoothnessPrior`

   Implentation of `SmoothnessPrior` where :math:`\phi` is the the Relative Difference Prior (DEFINE HERE)

   .. py:method:: gradient(sum, diff, gamma, eps=1e-11)

      Gradient function.

      :param sum: tensor of size [batch_size,Lx,Ly,Lz] representing (DEFINE)
      :type sum: torch.Tensor
      :param diff: tensor of size [batch_size,Lx,Ly,Lz] representing (DEFINE)
      :type diff: torch.Tensor
      :param gamma: hyperparameter used in relative difference function
      :type gamma: torch.Tensor
      :param eps: Used to prevent division by 0. Defaults to 1e-11.
      :type eps: float, optional

      :returns: _description_
      :rtype: _type_



.. py:class:: Prior(beta, device = 'cpu')

   Bases: :py:obj:`torch.nn.Module`

   Abstract class for implementation of prior :math:`V(f)`. Any function inheriting from this class should implement a ``foward`` method that computes the tensor :math:`\frac{\partial V}{\partial f_r}` where :math:`f` is an object tensor.


   .. py:method:: set_object_meta(object_meta)

      Sets object metadata parameters.

      :param object_meta: Object metadata describing the system.
      :type object_meta: ObjectMeta


   .. py:method:: set_beta_scale(factor)

      Sets :math:`\beta`

      :param factor: Value of :math:`\beta`
      :type factor: float


   .. py:method:: set_object(object)

      Sets the object :math:`f_r` used to compute :math:`\frac{\partial V}{\partial f_r}`

      :param object: Tensor of size [batch_size, Lx, Ly, Lz] which the prior
      :type object: torch.tensor
      :param will be computed on:


   .. py:method:: set_device(device = 'cpu')

      Sets the pytorch computation device

      :param device: sets device.
      :type device: str


   .. py:method:: forward()
      :abstractmethod:

      Abstract method to compute prior based on the ``self.object`` attribute.




