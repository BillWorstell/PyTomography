:py:mod:`pytomography.priors.smoothness`
========================================

.. py:module:: pytomography.priors.smoothness


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.priors.smoothness.SmoothnessPrior
   pytomography.priors.smoothness.QuadraticPrior
   pytomography.priors.smoothness.LogCoshPrior




.. py:class:: SmoothnessPrior(beta, phi, delta=1, device='cpu')

   Bases: :py:obj:`torch.nn.Module`

   Implementation of priors with gradients of the form 
       $$
   rac{\partial V}{\partial f_r}=
   rac{eta}{\delta}\sum_{r,s}w_{s}\phi\left(
   rac{f_r-f_s}{\delta}
   ight) $$
       where $V$ is from the log-posterior probability $\log P(g | f) - eta V(f)$
       

   .. py:method:: get_kernel()

      Obtains the kernel used to get $\partial V / \partial f$ (this is an array with the
      same dimensions as the object space image)

      Returns:
          (torch.nn.Conv3d, torch.tensor): Kernel used for convolution with number of output channels equal
          to $s$ in the forumla above, and array of weights $w_s$ used in formula above.


   .. py:method:: set_object_meta(object_meta)

      Sets object metadata parameters.

      Args:
          object_meta (ObjectMeta): Object metadata describing the system.


   .. py:method:: set_kernel(object_meta)

      Sets the kernel using  `get_kernel` and the corresponding object metadata.

      Args:
          object_meta (_type_): _description_


   .. py:method:: set_beta_scale(factor)

      Sets $eta$ used in the formula above

      Args:
          factor (float): Value of $eta$ used in formula above.


   .. py:method:: set_object(object)

      Sets the object used to compute the prior on

      Args:
          object (torch.tensor): Tensor of size [batch_size, Lx, Ly, Lz] which the prior
          will be computed on


   .. py:method:: forward()

      Computes the prior on self.object

      Returns:
          torch.tensor: Tensor of shape [batch_size, Lx, Ly, Lz] representing $\partial V / \partial f_r$



.. py:class:: QuadraticPrior(beta, delta=1, device='cpu')

   Bases: :py:obj:`SmoothnessPrior`

   Implentation of `SmoothnessPrior` where $\phi$ is the identity function


.. py:class:: LogCoshPrior(beta, delta=1, device='cpu')

   Bases: :py:obj:`SmoothnessPrior`

   Implementation of `SmoothnessPrior` where $\phi$ is the hyperbolic tangent function


