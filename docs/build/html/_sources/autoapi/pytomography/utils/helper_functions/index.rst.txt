:py:mod:`pytomography.utils.helper_functions`
=============================================

.. py:module:: pytomography.utils.helper_functions


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pytomography.utils.helper_functions.rev_cumsum
   pytomography.utils.helper_functions.rotate_detector_z
   pytomography.utils.helper_functions.get_distance



.. py:function:: rev_cumsum(x)

   Reverse cumulative sum along the first axis of a tensor of shape [batch_size, Lx, Ly, Lz].
   since this is used with CT correction, the initial voxel only contributes 1/2.

   Args:
       x (torch.tensor[batch_size,Lx,Ly,Lz]): Tensor to be summed

   Returns:
       torch.tensor[batch_size, Lx, Ly, Lz]: The cumulatively summed tensor.


.. py:function:: rotate_detector_z(x, angle, interpolation=InterpolationMode.BILINEAR, negative=False)

   Returns am object tensor in a rotated reference frame such that the scanner is located
   at the +x axis. Note that the scanner angle $eta$ is related to $\phi$ (azimuthal angle)
   by $\phi = 3\pi/2 - eta$. 

   Args:
       x (torch.tensor[batch_size, Lx, Ly, Lz]): Tensor aligned with cartesian coordinate system specified
       by the manual. 
       angle (float): The angle $eta$ where the scanner is located.
       interpolation (InterpolationMode, optional): Method of interpolation used to get rotated image.
       Defaults to InterpolationMode.BILINEAR.
       negative (bool, optional): If True, applies an inverse rotation. In this case, the tensor
       x is an object in a coordinate system aligned with $eta$, and the function rotates the
       x back to the original cartesian coordinate system specified by the users manual. In particular, if one
       uses this function on a tensor with negative=False, then applies this function to that returned
       tensor with negative=True, it should return the same tensor. Defaults to False.

   Returns:
       torch.tensor[batch_size, Lx, Ly, Lz]: Rotated tensor.


.. py:function:: get_distance(Lx, r, dx)

   Given the radial distance to center of object space from the scanner, computes the distance 
     between each parallel plane (i.e. (y-z plane)) and a detector located at +x. This function is
     used for point spread function (PSF) blurring where the amount of blurring depends on the
     distance from the detector.

   Args:
       Lx (int): The number of y-z planes to compute the distance of
       r (float): The radial distance between the central y-z plane and the detector at +x.
       dx (float): The spacing between y-z planes in Euclidean distance.

   Returns:
       np.array[Lx]: An array of distances for each y-z plane to the detector.


