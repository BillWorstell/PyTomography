{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Implementing Filtered Back Projection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.append('/home/ubuntu/tormography/src')\n",
    "import os\n",
    "from pytomography.projections import ForwardProjectionNet, BackProjectionNet\n",
    "from pytomography.metadata import ObjectMeta, ImageMeta\n",
    "from pytomography.corrections import CorrectionNet\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The two foundational tools of image reconstruction are\n",
    "\n",
    "1. Forward projection $\\sum_{i} c_{ij} a_i$\n",
    "2. Back projection $\\sum_{j} c_{ij} b_j$\n",
    "\n",
    "Let's discuss what these operators actually mean. First, let's define our quantities. $c_{ij}$ is known as the system matrix, and may include information involving attenuation and PSF correction. $a_i$ is an arbtriary object and $b_j$ is an arbitrary image. \n",
    "\n",
    "It's worth now discussing what the indices $i$ and $j$ actually mean. You might think: objects are three dimensional, shouldn't there be at least 3 indices when we're doing linear operations? Consider the following: because we are in a discrete space, any 3 dimensional object can be converted to a single (albeit very long) one dimensional object: a 128x128x128 3D matrix can be converted into a single 1D vector of length 2097152. That's how many voxels there are in object space: you can think of index $i$ as indexing a single voxel.\n",
    "\n",
    "The same can be said for an image. If we have 64 projections of matrix size 128x128, then that can be thought of as a single vector of length 1048576. That's also how many individual detector elements there are.\n",
    "\n",
    "So in forward projection $\\sum_{i} c_{ij} a_i$, the system matrix $c_{ij}$ maps the contribution from voxel $i$ to a detector element $j$. In back projection $\\sum_{j} c_{ij} b_j$, the system matrix $c_{ij}$ maps the intensity in detector element back to every possible voxel $i$ that could have contributed to it. In reality, however, not every voxel that could have contributed to detector element $j$ does so with equal intensity; it is for this reason that forward projection followed by back projection does not yield the original image. \n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's experiment with these operators. First we'll make a 3D rectangle in object space:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 128, 128, 132])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = torch.linspace(-1,1,128)\n",
    "y = torch.linspace(-1,1,128)\n",
    "z = torch.linspace(-1,1,132)\n",
    "xv, yv, zv = torch.meshgrid([x,y,z], indexing='ij')\n",
    "object_truth = (xv>-0.2)*(xv<0.2)*(yv>-0.15)*(yv<0.15)*(zv>-0.1)*(zv<0.1)\n",
    "object_truth = object_truth.to(torch.float).unsqueeze(dim=0) # add batch dimension\n",
    "object_truth.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f6fad220760>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,4))\n",
    "plt.pcolormesh(object_truth[0].sum(axis=2).T, cmap='Greys_r')\n",
    "plt.axis('off')\n",
    "plt.colorbar()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we do any projections, we need to get corresponding metadata for our object. In this case, we'll assume the voxel sizes are 1cm $^3$. For our image space, we'll assume 60 projections are taken at angular spacing of 6 degrees."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "angles = np.arange(0,360.,6.)\n",
    "object_meta = ObjectMeta(dr=(1,1,1), shape=object_truth[0].shape)\n",
    "image_meta = ImageMeta(object_meta, angles=angles)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this metadata, we can create our forward and back projection networks. We'll use no image correction techniques now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "fp_net = ForwardProjectionNet(object_correction_nets=[],\n",
    "                              image_correction_nets=[],\n",
    "                              object_meta=object_meta,\n",
    "                              image_meta=image_meta)\n",
    "bp_net = BackProjectionNet(object_correction_nets=[],\n",
    "                           image_correction_nets=[],\n",
    "                           object_meta=object_meta,\n",
    "                           image_meta=image_meta)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now use the `fp_net` to convert the object into an image (this is a Mickey-Mouse version of a detector simulation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 60, 128, 132])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image = fp_net(object_truth)\n",
    "image.shape"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can look at a projection at 60 degrees for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAAD3CAYAAAD43Q75AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPKUlEQVR4nO3dfYxld13H8c+XLpTSpfZxaXcNNAUrUKQNPqAoRoyCGjGLCiE0UDT4EDUQIRpEDeADTwYxBIho5FEgMYAgFhEiT6JBkCDURgFZi7Dbsn3attuukJaff5w77d11ZrfzbdmdM/t6JTeZuefsuWfa794973vOvVNjjAAAALA+9zjWOwAAADBHYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsTUYVTV06vqY8d6P2AtZpS5MbPMkbllozOjx86miqmq+nBVXV9VJx7rfVlLTV5aVdcubi+tqjrM+k+pqi9V1c1V9a6qOv1o7i93r5nM6K9X1a6qurGq9lTVK6pqy9Lyc6vqQ1V1S1X9Z1X9yGG2dWJVvW6xrauq6tlH56fg7jKHmU2SqnpEVX20qvZX1Ver6llLy8zscWYOc1tVp1bVG6tq7+L2gkOWm9tNbCYz+pjFDN5QVVccsmxbVb1tcZxwQ1X9U1U98pB17vQxbFVdVFWfWsz7p6rqom/OT3X32zQxVVXnJnl0kpHkp47t3hzWLybZmeTCJA9P8vgkv7TailV1QZLXJnlqkvsluSXJa47KXnK3m9GM/k2SR4wxTknysEyz+syl5W9L8ukkZyT57SRvr6qz1tjWC5J8W5IHJHlMkt+sqh/7Ju03d7O5zGxVnZnkfZmeL89I8qAk719axcweR+Yyt0lekeQ+Sc5N8j1JnlpVP7e03NxuUjOa0ZuTvC7Jb6yybGuSTyb5ziSnJ3ljkkuramuyvmPYqrpXkncn+cskpy229e7F/RvepompJE9L8vEkb0hyycqdVfWGqnp1VV1aVTdV1b9U1QOXlj+2qj63qOrXVNVHquoZqz1AVT24qj5QVdct/syTGvt5SZKXjzG+MsbYneTlSZ6+xroXJ3nPGOOjY4z9SX43yU9X1X0bj8uxN4sZHWN8cYyxb2WTSb6R6eA0VXV+kkckef4Y48AY4x1JLkvyM2ts7pIkvz/GuH6M8R9J/jxrzzsbzyxmNsmzk/z9GOMtY4yvjTFuWsybmT0+zWVuH5/kZWOMW8YYVyT5iyQ/v9i+ud3cZjGjY4xPjDHenGTXKst2jTH+eIxx5RjjtjHGnyW5V5JvX6yynmPYH0qyJcmfLJ7DX5np+OOH17vPx8Jmi6m3LG6Pq6r7LS17cpIXZqrd/0ryh8ntr2a+PclvZXrl53NJHrXaxqvq5CQfSPLWJNsW23xNVT10sfy5VbVvrdvSpi5I8pml7z+zuG81B607xvhikq8nOf8I/y3YmOYyoyun5m9Mck2mM1OvXSy6IMmuMcZNS6uvOsNVdVqSc3Ln552NZy4z+71Jrquqf67pcqn3VNX9F8vM7PFnLnObTAeMy18/bPG1ud3c5jSjd0pNl+Xda7HPyfqOYS9I8tkxxli677OZyQxvipiqqh/IdGr7r8YYn0ryxSRPWVrlrxd1fWumwb1ocf9PJLl8jPHOxbJXJrlqjYf5ySRXjDFeP8a4dYzx6STvSPLEJBljvGSMcepat6XtbE1yw9L3NyTZWrXq+6YOXXdlfWemZmZmM5oxxlsXl/mdn+RPk3x1sWg9M7l1afmR1mWDmdnMfmumV3efleT+Sf470yVSiZk9rsxsbt+X5LlVdd+qelCms1L3WSwzt5vUzGb0zv5MpyR5c5IXjjFW5nC9Mzzb491NEVOZ/hF9/xjjmsX3b83SadMcPGy35I4nnu1JvryyYFHEX1njMR6Q5JGHlPvFSc5e577uT3LK0venJNl/SI2vte7K+jetsi4b25xm9HZjjC8kuTx3XOe8npncv7T8SOuy8cxpZg9kOgD55BjjfzO9qvuoqvqWmNnjzZzm9pmZZvcLmd4v8ralxzS3m9ecZvSIquqkJO9J8vExxouXFq13hmd7vLvlyKtsbIv/iU9KckJVrQzgiUlOraoLj/DHr8z0iubKtmr5+0N8OclHxhg/usZ+PC/J89Z6oDHGyl+GyzNdNvWJxfcXLu5bzcq6K49xXqaf7fNrPQ4bzwxn9FBbkqxcs315kvOq6r5Ll59cmOkfg0O3d31VXblY/oGlddeadzaIGc7sZzO9kfv2RUtfm9njxNzmdoxxXaYD3JU/96LccWxgbjehuc3okdT0SYTvyhR1h36Y2nqOYS9P8pyqqqWTCw9P8uo7sx/H2mY4M7UzyW1JHprpVOhFSR6S5B8zXZN6OJcm+Y6q2lnTRz//atau9r9Ncn5VPbWq7rm4fXdVPSRJxhgvGmNsXeu2tJ03JXl2Ve2oqu1JnpPpDYireUuSx1fVoxfXv/5ekneOg6+hZuPbmRnNaFU9o6q2Lb5+aKbrs/9hsY3PJ/m3JM+vqntX1RMyPeG9Y419elOS36mq06rqwUl+IWvPOxvHzsxoZpO8PskTavpo3XtmeqPzx8YYN5jZ48rOzGhuq+qBVXVGVZ1QVT+e6dN+/2CxDXO7Oe3MvGb0HlV17yT3nL6te9fiE/YWz7Vvz3R29ZIxxjcO2Yf1HMN+ePHf5Zk1fcz/ry3u/+AR/ptsCJshpi5J8voxxv+MMa5auSV5VaZXfNY8+7Y4xfrEJC9Lcm2m4f7XJF9bZd2bkjw205v49mQ6DfvSTJW9Hq/NdDr0siT/nukvx8qb+1PT70h59OIxL0/yy5kGcm+ma0d/ZZ2Px7E3txn9/iSXVdXNSd67uC2/gvXkJN+V5PokL0nys2OMq5Okqi6uquVXQ5+f6XrwLyX5SJI/GmO8b537w9E3q5kdY3ww04xemum58kE5+D0IZvb4MKu5zfSR0pdlupTpxUkuXvy7v8Lcbj5zm9EfzBRL7830ftQDuePXTjwq03uzHptk3+L49U4fw1bV3y3OkGWM8fVMofm0JPsyvX9w5+L+Da/Gqm/VOT5V1T0ynaq8eIzxoWO9P3AoM8rcmFnmyNyy0ZnRjWMznJm6S6rqcTX9FvITM72yWZk++x82BDPK3JhZ5sjcstGZ0Y3puI+pJN+X6dT4NZl+gd7OMcaBY7tLcBAzytyYWebI3LLRmdENyGV+AAAADc5MAQAANBz290xVldNW3CVjjDqaj2dmuauO9swm5pa7xswyN2aWuTnczDozBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0CCmAAAAGsQUAABAg5gCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0LDlWO/ARjDGOOqPWVVH/TGZr23btiVJzjvvvJx77rnZsWNHduzYcfvXZ511VpLk9NNPz8knn5wtW9b/V/vWW2/NzTffnCS57rrrcvXVV2f37t254oorsnv37tu/3rVrV5Jk7969d9NPx2Z2yimn5Jxzzsn27duzffv2nHHGGbfP87Zt23L22WfnzDPPzGmnnZZTTz01W7duzUknnZQTTjjh/23rtttuy4EDB7J///7s27cv119/fZLkmmuuyVVXXZW9e/dm7969ufbaa7Nnz57s2bMnV155ZZLkxhtvPHo/NJvSN+tYwfEAd9Xy82ySg55rV3ueTbLmc+3K82ySg55rV3ueTXLQc+3x+jzrzBQAAECDmAIAAGgQUwAAAA1iCgAAoEFMAQAANIgpAACABjEFAADQIKYAAAAaxBQAAECDmAIAAGgQUwAAAA1iCgAAoEFMAQAANIgpAACABjEFAADQIKYAAAAaxBQAAECDmAIAAGgQUwAAAA1iCgAAoEFMAQAANIgpAACAhhpjrL2wau2FcCeMMepoPp6Z5a462jObmFvuGjPL3JhZ5uZwM+vMFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABrEFAAAQIOYAgAAaBBTAAAADWIKAACgQUwBAAA0iCkAAIAGMQUAANAgpgAAABpqjHGs9wEAAGB2nJkCAABoEFMAAAANYgoAAKBBTAEAADSIKQAAgAYxBQAA0PB/Z58GCZ8F1v8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1080x288 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1,5,figsize=(15,4))\n",
    "for i, proj in enumerate([0,5,10,15,20]):\n",
    "    axes[i].pcolormesh(image[0][proj].T, cmap='Greys_r')\n",
    "    axes[i].set_title(f'Angle={image_meta.angles[proj]}')\n",
    "    axes[i].axis('off')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At angles like 60 degrees, the cube is darkest in the center and lighter on the outside; this is like looking through a semi-transparent cube in real life, it's going to be darkest near the center if you're looking at it from an off angle."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also back project the cube to turn it back into an object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 128, 128, 132])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "object_new = bp_net(image)\n",
    "object_new.shape"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But if we look at the new object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f6f873bc160>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,4))\n",
    "plt.pcolormesh(object_new[0].sum(axis=2).T, cmap='Greys_r')\n",
    "plt.axis('off')\n",
    "plt.colorbar()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that it has been blurred (note: no blurring in the $z$ direction because the voxels at height $z_0$ will only contribute to detector elements at height $z_0$ due to collimation)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example**: Filtered Back Projection. In this case the image estimate is given by\n",
    "\n",
    "$$\\hat{f}_i = \\pi \\sum_j c_{ij} \\left( \\mathcal{F}^{-1}(|\\omega|\\mathcal{F}(g)) \\right)_j $$\n",
    "\n",
    "where the term in brackets involves applying a 1D convolution (in this case, multiplication in Fourier space with the Ramp filter) to the image along the $r$ axis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "freq_fft = torch.fft.fftfreq(image.shape[-2]) \n",
    "filter = torch.abs(freq_fft).reshape((-1,1))\n",
    "image_fft = torch.fft.fft(image, axis=-2)\n",
    "image_fft = image_fft* filter\n",
    "image_filtered = torch.fft.ifft(image_fft, axis=-2).real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "object_fbp = bp_net(image_filtered) *np.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f6f8724edd0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,4))\n",
    "plt.pcolormesh(object_fbp[0][:,:,64].T, cmap='Greys_r')\n",
    "plt.axis('off')\n",
    "plt.colorbar()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The cube is no longer blurred, but artifacts are present. Such artifacts are not present when using algorithms like OSEM for reconstruction."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since this operation is applied to the image before back projection, we can include turn it into a subclass of the `CorrectionNet`.\n",
    "* It has to have `CorrectionNet` as a parent class\n",
    "* It has to take in `object_meta`, `image_meta`, and `device`\n",
    "* It has to implement the `forward` function. In this case, since it's a correction done in image space, it has to take in an image and return an image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class RampCorrectionNet(CorrectionNet):\n",
    "    def __init__(self, object_meta, image_meta, device='cpu'):\n",
    "        super(RampCorrectionNet, self).__init__(object_meta, image_meta, device)\n",
    "    @torch.no_grad()\n",
    "    def forward(self, image):\n",
    "        freq_fft = torch.fft.fftfreq(image.shape[-2]) \n",
    "        filter = torch.abs(freq_fft).reshape((-1,1))\n",
    "        image_fft = torch.fft.fft(image, axis=-2)\n",
    "        image_fft = image_fft* filter\n",
    "        image_filtered = np.pi * torch.fft.ifft(image_fft, axis=-2).real\n",
    "        return image_filtered"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can create a new back projection network that implements this ramp filter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "ramp_correction_net = RampCorrectionNet(object_meta, image_meta)\n",
    "bp_rampfilter_net = BackProjectionNet(object_correction_nets=[],\n",
    "                                    image_correction_nets=[ramp_correction_net],\n",
    "                                    object_meta=object_meta,\n",
    "                                    image_meta=image_meta)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And we can get our object using the back projection net which uses filtering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "object_fbp = bp_rampfilter_net(image)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And sure enough it's the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f6f87119b70>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 360x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,4))\n",
    "plt.pcolormesh(object_fbp[0][:,:,64].T, cmap='Greys_r')\n",
    "plt.axis('off')\n",
    "plt.colorbar()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pytorch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "c111c98ab16bb2146b3750ff96300d2ea24b959b05391bbc2c1f7544a5d2c2ae"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
